<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace backend\models\base;

use Yii;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\TimestampBehavior;

/**
 * This is the base-model class for table "mmf_commitment".
 *
 * @property integer $id
 * @property integer $user_id
 * @property integer $application_id
 * @property integer $team_id
 * @property integer $job_id
 * @property string $jobName
 * @property string $year
 * @property integer $rostered
 * @property string $notes
 * @property integer $hours
 * @property string $report
 * @property integer $reinvite
 * @property integer $created_at
 * @property integer $created_by
 * @property integer $updated_at
 * @property integer $updated_by
 *
 * @property \backend\models\Application $application
 * @property \backend\models\Job $job
 * @property \backend\models\Profile $user
 * @property \backend\models\Team $team
 * @property string $aliasModel
 */
abstract class Commitment extends \yii\db\ActiveRecord
{



    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'mmf_commitment';
    }


    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => BlameableBehavior::className(),
            ],
            [
                'class' => TimestampBehavior::className(),
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['user_id', 'year'], 'required'],
            [['user_id', 'application_id', 'team_id', 'job_id', 'rostered', 'hours', 'reinvite'], 'integer'],
            [['year'], 'safe'],
            [['notes', 'report'], 'string'],
            [['jobName'], 'string', 'max' => 48],
            [['application_id'], 'unique'],
            [['application_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\models\Application::className(), 'targetAttribute' => ['application_id' => 'id']],
            [['job_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\models\Job::className(), 'targetAttribute' => ['job_id' => 'id']],
            [['user_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\models\Profile::className(), 'targetAttribute' => ['user_id' => 'user_id']],
            [['team_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\models\Team::className(), 'targetAttribute' => ['team_id' => 'id']]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'user_id' => 'User ID',
            'application_id' => 'Application ID',
            'team_id' => 'Team ID',
            'job_id' => 'Job ID',
            'jobName' => 'Job Name',
            'year' => 'Year',
            'rostered' => 'Rostered',
            'notes' => 'Notes',
            'hours' => 'Hours',
            'report' => 'Report',
            'reinvite' => 'Reinvite',
            'created_at' => 'Created At',
            'created_by' => 'Created By',
            'updated_at' => 'Updated At',
            'updated_by' => 'Updated By',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getApplication()
    {
        return $this->hasOne(\backend\models\Application::className(), ['id' => 'application_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getJob()
    {
        return $this->hasOne(\backend\models\Job::className(), ['id' => 'job_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(\backend\models\Profile::className(), ['user_id' => 'user_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getTeam()
    {
        return $this->hasOne(\backend\models\Team::className(), ['id' => 'team_id']);
    }


    
    /**
     * @inheritdoc
     * @return \common\models\CommitmentQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \common\models\CommitmentQuery(get_called_class());
    }


}
